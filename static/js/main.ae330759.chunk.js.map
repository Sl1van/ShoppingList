{"version":3,"sources":["useLocalStorage.js","ShoppingList.js","App.js","reportWebVitals.js","index.js"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","ShoppingListEntry","props","Form","Row","className","FormControl","style","minWidth","placeholder","onChange","e","changeName","target","id","name","changeAmount","amount","InputGroup","Append","Button","variant","onClick","deleteMethod","ShoppingList","isDone","items","setItems","deleteEntryByID","filter","entry","newValue","idx","map","Container","element","length","Math","max","l","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae330759.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nfunction useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n\r\n  // Pass initial state function to useState so logic is only executed once\r\n\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n\r\n      const item = window.localStorage.getItem(key);\r\n\r\n      // Parse stored json or if none return initialValue\r\n\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n\r\n      console.log(error);\r\n\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n\r\n  // ... persists the new value to localStorage.\r\n\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n\r\n      // Save state\r\n\r\n      setStoredValue(valueToStore);\r\n\r\n      // Save to local storage\r\n\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import React from \"react\";\r\nimport { Button, Col, Container, Form, FormControl, InputGroup } from \"react-bootstrap\";\r\nimport { Plus } from \"react-bootstrap-icons\";\r\nimport useLocalStorage from './useLocalStorage';\r\n\r\nfunction ShoppingList() {\r\n  const [items, setItems] = useLocalStorage(\"shoppinglist\", [{ id: 0, name: \"\", amount: 1, isDone: false }]);\r\n\r\n  function deleteEntryByID(id) {\r\n    setItems(items.filter(entry => entry.id !== id));\r\n  }\r\n\r\n  const addHandler = () => {\r\n    setItems([...items, { id: items.length !== 0 ? Math.max(...items.map((l) => l.id)) + 1 : 0, name: \"\", amount: 1, isDone: false }]);\r\n  }\r\n\r\n  const changeName = (newValue, idx) => {\r\n    setItems(\r\n      items.map((item) => {\r\n        if (item.id === idx) {\r\n          return {\r\n            ...item,\r\n            name: newValue\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  }\r\n\r\n  const changeAmount = (newValue, idx) => {\r\n    setItems(\r\n      items.map((item) => {\r\n        if (item.id === idx) {\r\n          return {\r\n            ...item,\r\n            amount: newValue\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  return (\r\n    <Container className=\"d-flex align-items-center flex-column\">\r\n      <h1>Shopping List</h1>\r\n      <InputGroup className=\"d-flex align-items-center flex-column\">\r\n        {items.map((element) => (\r\n          <ShoppingListEntry\r\n            name={element.name}\r\n            deleteMethod={deleteEntryByID}\r\n            amount={element.amount}\r\n            changeName={changeName}\r\n            changeAmount={changeAmount}\r\n            id={element.id}\r\n          />\r\n        ))}\r\n      </InputGroup>\r\n      <Button onClick={addHandler}><Plus /></Button>\r\n    </Container>\r\n  );\r\n}\r\n\r\nfunction ShoppingListEntry(props) {\r\n  return (\r\n    <>\r\n      <Form.Row className=\"mb-2 col-xs-12 col-lg-12\">\r\n        <FormControl\r\n          // className=\"w-50 min-vw-150 p-1 mr-2\"\r\n          className=\"col-xs-6 col-lg-6\"\r\n          style={{ minWidth: \"100px\" }}\r\n          placeholder=\"Bitte gebe einen Eintrag ein\"\r\n          onChange={(e) => props.changeName(e.target.value, props.id)}\r\n          value={props.name}\r\n        ></FormControl>\r\n        {/* </Col> */}\r\n        {/* <Col md=\"1\"> */}\r\n        <FormControl\r\n          // className=\"w-25 mw-10 p-1 mr-2\"\r\n          className=\"col-xs-6 col-lg-3\"\r\n          placeholder=\"Bitte gebe die Menge ein\"\r\n          onChange={(e) => props.changeAmount(e.target.value, props.id)}\r\n          value={props.amount}\r\n        ></FormControl>\r\n        {/* </Col> */}\r\n        <InputGroup.Append className=\"col-xs-12 col-lg-3\"> \r\n          <Button\r\n            className=\"w-20\"\r\n            variant=\"danger\"\r\n            onClick={() => props.deleteMethod(props.id)}\r\n          >\r\n            LÃ¶schen\r\n            </Button>\r\n        </InputGroup.Append>\r\n      </Form.Row>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default ShoppingList;\r\n","import \"./App.css\";\nimport ShoppingList from \"./ShoppingList\";\n\n\nfunction App() {\n  return (\n    <ShoppingList />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}